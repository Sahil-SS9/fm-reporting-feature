import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Play, Eye, Download, Mail, MoreHorizontal, Trash2, CheckCircle2, Loader2, XCircle, FileText } from "lucide-react";
import { format, parseISO, formatDistanceToNow } from "date-fns";
import { ReportInstance } from "@/data/mockData";

interface ReportHistoryTabProps {
  configId: string;
  instances: ReportInstance[];
  onGenerate: () => void;
}

export const ReportHistoryTab: React.FC<ReportHistoryTabProps> = ({ 
  configId, 
  instances, 
  onGenerate 
}) => {
  const navigate = useNavigate();
  const [sortedInstances, setSortedInstances] = useState(
    [...instances].sort((a, b) => 
      new Date(b.generatedAt).getTime() - new Date(a.generatedAt).getTime()
    )
  );

  const formatDateTime = (dateString: string) => {
    try {
      return format(parseISO(dateString), 'MMM dd, yyyy h:mm a');
    } catch {
      return 'N/A';
    }
  };

  const formatRelativeTime = (dateString: string) => {
    try {
      return formatDistanceToNow(parseISO(dateString), { addSuffix: true });
    } catch {
      return '';
    }
  };

  const getStatusBadge = (status: ReportInstance['status']) => {
    switch (status) {
      case 'generating':
        return (
          <Badge variant="outline" className="bg-orange-500/10 text-orange-600 border-orange-200">
            <Loader2 className="h-3 w-3 mr-1 animate-spin" />
            Generating...
          </Badge>
        );
      case 'generated':
        return (
          <Badge variant="outline" className="bg-green-500/10 text-green-600 border-green-200">
            <CheckCircle2 className="h-3 w-3 mr-1" />
            Generated
          </Badge>
        );
      case 'failed':
        return (
          <Badge variant="outline" className="bg-red-500/10 text-red-600 border-red-200">
            <XCircle className="h-3 w-3 mr-1" />
            Failed
          </Badge>
        );
      case 'deleted':
        return (
          <Badge variant="outline" className="bg-gray-500/10 text-gray-600 border-gray-200">
            <Trash2 className="h-3 w-3 mr-1" />
            Deleted
          </Badge>
        );
    }
  };

  const handleViewResults = (instanceId: string) => {
    navigate(`/reports/${configId}/instances/${instanceId}/results`);
  };

  const handleDownload = (instance: ReportInstance) => {
    console.log("Download instance:", instance.id);
    // Would trigger CSV download
  };

  const handleEmail = (instance: ReportInstance) => {
    console.log("Email instance:", instance.id);
    // Would open email sheet
  };

  const handleDelete = (instanceId: string) => {
    console.log("Delete instance:", instanceId);
    setSortedInstances(prev => 
      prev.map(i => i.id === instanceId ? { ...i, status: 'deleted' as const } : i)
    );
  };

  if (instances.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center py-16 space-y-6">
        <div className="w-24 h-24 bg-muted rounded-full flex items-center justify-center">
          <FileText className="h-12 w-12 text-muted-foreground" />
        </div>
        <div className="text-center space-y-2">
          <h2 className="text-xl font-semibold">No reports generated yet</h2>
          <p className="text-muted-foreground max-w-md">
            Click 'Generate New Version' above to create your first report instance.
          </p>
        </div>
        <Button onClick={onGenerate} size="lg">
          <Play className="h-4 w-4 mr-2" />
          Generate New Version
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="border rounded-lg">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Generated</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Records</TableHead>
              <TableHead>Filters</TableHead>
              <TableHead>Date Range</TableHead>
              <TableHead>Generated By</TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {sortedInstances.map((instance) => (
              <TableRow key={instance.id}>
                <TableCell>
                  <div className="space-y-1">
                    <div className="font-medium">{formatDateTime(instance.generatedAt)}</div>
                    <div className="text-xs text-muted-foreground">
                      {formatRelativeTime(instance.generatedAt)}
                    </div>
                  </div>
                </TableCell>
                <TableCell>{getStatusBadge(instance.status)}</TableCell>
                <TableCell>
                  {instance.rowCount !== null ? (
                    <span className="font-medium">{instance.rowCount.toLocaleString()}</span>
                  ) : (
                    <span className="text-muted-foreground text-sm">N/A</span>
                  )}
                </TableCell>
                <TableCell>
                  {instance.filters && Object.keys(instance.filters).length > 0 ? (
                    <div className="flex flex-wrap gap-1">
                      {Object.entries(instance.filters).map(([key, value]) => (
                        <Badge key={key} variant="secondary" className="text-xs">
                          {key.replace(/_/g, ' ')}: {Array.isArray(value) ? value.join(', ') : String(value)}
                        </Badge>
                      ))}
                    </div>
                  ) : (
                    <span className="text-muted-foreground text-sm">No filters</span>
                  )}
                </TableCell>
                <TableCell>
                  {instance.dateRange ? (
                    <div className="text-sm">
                      <div className="font-medium">{instance.dateRange.from}</div>
                      <div className="text-muted-foreground">to {instance.dateRange.to}</div>
                    </div>
                  ) : (
                    <span className="text-muted-foreground text-sm">All dates</span>
                  )}
                </TableCell>
                <TableCell>{instance.generatedBy.name}</TableCell>
                <TableCell className="text-right">
                  {instance.status === 'generated' || instance.status === 'deleted' ? (
                    <div className="flex items-center justify-end gap-2">
                      <Button
                        variant="default"
                        size="sm"
                        onClick={() => handleViewResults(instance.id)}
                        disabled={instance.status === 'deleted'}
                      >
                        <Eye className="h-4 w-4 mr-2" />
                        View Results
                      </Button>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem 
                            onClick={() => handleDownload(instance)}
                            disabled={instance.status === 'deleted'}
                          >
                            <Download className="mr-2 h-4 w-4" />
                            Download CSV
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => handleDelete(instance.id)}
                            className="text-destructive focus:text-destructive"
                            disabled={instance.status === 'deleted'}
                          >
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  ) : instance.status === 'generating' ? (
                    <span className="text-sm text-muted-foreground">Processing...</span>
                  ) : (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={onGenerate}
                    >
                      Retry
                    </Button>
                  )}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
};
